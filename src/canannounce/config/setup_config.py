#!/usr/bin/env python3
"""
Configuration setup utility for canannounce.
This helps users create their local_settings.py file after installation.
"""
import os
import sys
import shutil
from pathlib import Path

def get_config_dir():
    """Get the user's config directory for canannounce."""
    home = Path.home()

    # Platform-specific config directories
    if sys.platform == "win32":
        config_dir = home / "AppData" / "Local" / "canannounce"
    elif sys.platform == "darwin":  # macOS
        config_dir = home / "Library" / "Application Support" / "canannounce"
    else:  # Linux and others
        config_dir = home / ".config" / "canannounce"

    return config_dir

def setup_config():
    """Interactive setup for canannounce configuration."""
    print("üéØ CanAnnounce Configuration Setup")
    print("=" * 40)

    config_dir = get_config_dir()
    config_file = config_dir / "local_settings.py"

    # Create config directory if it doesn't exist
    config_dir.mkdir(parents=True, exist_ok=True)

    # Check if config already exists
    if config_file.exists():
        print(f"Configuration file already exists at: {config_file}")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response not in ['y', 'yes']:
            print("Setup cancelled.")
            return

    print(f"Creating configuration at: {config_dir}")

    # Get user inputs
    print("\nüìù Please provide the following information:")

    canvas_base_url = input("Canvas Base URL (e.g., https://your-school.instructure.com): ").strip()
    if not canvas_base_url:
        print("‚ùå Canvas Base URL is required!")
        return

    canvas_token = input("Canvas API Token: ").strip()
    if not canvas_token:
        print("‚ùå Canvas API Token is required!")
        return

    tinymce_api_key = input("TinyMCE API Key (optional, press Enter to skip): ").strip()

    # Advanced settings with defaults
    print("\nüîß Advanced Settings (press Enter for defaults):")
    upcoming_days = input("Days ahead to look for assignments (default: 30): ").strip() or "30"
    include_quiz = input("Include quiz questions? (y/N): ").strip().lower() in ['y', 'yes']
    quiz_prompt = input("Quiz question prompt (default: 'Practice Question'): ").strip() or "Practice Question"
    announcement_now = input("Default to 'publish now'? (y/N): ").strip().lower() in ['y', 'yes']

    # Create the config file content
    config_content = f'''"""
Local settings for CanAnnounce
Generated by setup wizard
"""

# Canvas Configuration
canvas_base_url = "{canvas_base_url}"
canvas_token = "{canvas_token}"

# TinyMCE Configuration (for rich text editing)
TINYMCE_API_KEY = "{tinymce_api_key}"

# Assignment Settings
UPCOMING_ASSIGNMENT_DAYS = {upcoming_days}

# Quiz Settings
INCLUDE_QUIZ_QUESTION = {include_quiz}
QUIZ_QUESTION_PROMPT = "{quiz_prompt}"

# Announcement Settings
ANNOUNCEMENT_NOW = {announcement_now}

# Web Interface Settings
WEB_PORT = 5000
WEB_HOST = "127.0.0.1"
WEB_DEBUG = False
'''

    # Write the config file
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)

        print(f"\n‚úÖ Configuration created successfully!")
        print(f"üìÅ Config location: {config_file}")
        print(f"\nüöÄ You can now run: canannounce")
        print(f"üìù To edit config later: {config_file}")

    except Exception as e:
        print(f"‚ùå Error creating config file: {e}")
        return

    # Create a quick start guide
    readme_file = config_dir / "README.txt"
    readme_content = f"""CanAnnounce Configuration Directory
==================================

This directory contains your CanAnnounce configuration files.

Files:
- local_settings.py: Main configuration file
- user_settings.json: User interface preferences (auto-generated)

Config location: {config_dir}

To run the application:
    canannounce

To reconfigure:
    canannounce-setup

For support, visit: https://github.com/yourusername/canannounce
"""

    with open(readme_file, 'w', encoding='utf-8') as f:
        f.write(readme_content)

if __name__ == "__main__":
    setup_config()
