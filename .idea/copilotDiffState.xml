<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../canannounce/.github/ISSUE_TEMPLATE/bug_report.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/.github/ISSUE_TEMPLATE/bug_report.md" />
              <option name="updatedContent" value="---&#10;name: Bug report&#10;about: Create a report to help us improve&#10;title: '[BUG] '&#10;labels: bug&#10;assignees: ''&#10;&#10;---&#10;&#10;**Describe the bug**&#10;A clear and concise description of what the bug is.&#10;&#10;**To Reproduce**&#10;Steps to reproduce the behavior:&#10;1. Go to '...'&#10;2. Click on '....'&#10;3. Scroll down to '....'&#10;4. See error&#10;&#10;**Expected behavior**&#10;A clear and concise description of what you expected to happen.&#10;&#10;**Screenshots**&#10;If applicable, add screenshots to help explain your problem.&#10;&#10;**Environment (please complete the following information):**&#10; - OS: [e.g. macOS 12.0, Windows 11, Ubuntu 20.04]&#10; - Python Version: [e.g. 3.9.0]&#10; - PyQt5 Version: [e.g. 5.15.9]&#10; - Canvas Instance: [e.g. Instructure Cloud, Self-hosted]&#10;&#10;**Error Messages**&#10;If applicable, paste any error messages or logs here.&#10;&#10;**Additional context**&#10;Add any other context about the problem here." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/.github/ISSUE_TEMPLATE/feature_request.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/.github/ISSUE_TEMPLATE/feature_request.md" />
              <option name="updatedContent" value="---&#10;name: Feature request&#10;about: Suggest an idea for this project&#10;title: '[FEATURE] '&#10;labels: enhancement&#10;assignees: ''&#10;&#10;---&#10;&#10;**Is your feature request related to a problem? Please describe.**&#10;A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]&#10;&#10;**Describe the solution you'd like**&#10;A clear and concise description of what you want to happen.&#10;&#10;**Describe alternatives you've considered**&#10;A clear and concise description of any alternative solutions or features you've considered.&#10;&#10;**Additional context**&#10;Add any other context or screenshots about the feature request here.&#10;&#10;**Canvas Integration Impact**&#10;How would this feature interact with Canvas LMS? Any Canvas API considerations?" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/.github/PULL_REQUEST_TEMPLATE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/.github/PULL_REQUEST_TEMPLATE.md" />
              <option name="updatedContent" value="## Description&#10;&#10;Brief description of the changes made.&#10;&#10;## Type of Change&#10;&#10;- [ ] Bug fix (non-breaking change which fixes an issue)&#10;- [ ] New feature (non-breaking change which adds functionality)&#10;- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)&#10;- [ ] Documentation update&#10;- [ ] Code refactoring&#10;- [ ] Performance improvement&#10;&#10;## Testing&#10;&#10;- [ ] I have tested these changes locally&#10;- [ ] I have tested with multiple Canvas instances (if applicable)&#10;- [ ] I have tested both desktop and web interfaces (if applicable)&#10;- [ ] All existing tests pass&#10;- [ ] I have added tests for new functionality&#10;&#10;## Canvas API Impact&#10;&#10;- [ ] No Canvas API changes required&#10;- [ ] Uses existing Canvas API endpoints&#10;- [ ] Requires new Canvas API permissions&#10;- [ ] May affect Canvas API rate limits&#10;&#10;## Checklist&#10;&#10;- [ ] My code follows the project's style guidelines&#10;- [ ] I have performed a self-review of my code&#10;- [ ] I have commented my code, particularly in hard-to-understand areas&#10;- [ ] I have made corresponding changes to the documentation&#10;- [ ] My changes generate no new warnings&#10;- [ ] I have added tests that prove my fix is effective or that my feature works&#10;- [ ] New and existing unit tests pass locally with my changes&#10;&#10;## Screenshots (if applicable)&#10;&#10;Add screenshots to help explain your changes.&#10;&#10;## Additional Notes&#10;&#10;Any additional information about the implementation or considerations." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/.github/workflows/ci.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/.github/workflows/ci.yml" />
              <option name="updatedContent" value="name: CI&#10;&#10;on:&#10;  push:&#10;    branches: [ main, develop ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  test:&#10;    runs-on: ${{ matrix.os }}&#10;    strategy:&#10;      matrix:&#10;        os: [ubuntu-latest, macos-latest, windows-latest]&#10;        python-version: [3.8, 3.9, '3.10', 3.11]&#10;&#10;    steps:&#10;    - uses: actions/checkout@v3&#10;    &#10;    - name: Set up Python ${{ matrix.python-version }}&#10;      uses: actions/setup-python@v4&#10;      with:&#10;        python-version: ${{ matrix.python-version }}&#10;    &#10;    - name: Install system dependencies (Ubuntu)&#10;      if: runner.os == 'Linux'&#10;      run: |&#10;        sudo apt-get update&#10;        sudo apt-get install -y qt5-default libqt5gui5 libqt5core5a libqt5widgets5&#10;    &#10;    - name: Install system dependencies (macOS)&#10;      if: runner.os == 'macOS'&#10;      run: |&#10;        brew install qt@5&#10;    &#10;    - name: Install Python dependencies&#10;      run: |&#10;        python -m pip install --upgrade pip setuptools wheel&#10;        pip install Flask requests&#10;        # Skip PyQt5 in CI for now due to display issues&#10;    &#10;    - name: Lint with flake8&#10;      run: |&#10;        pip install flake8&#10;        # Stop the build if there are Python syntax errors or undefined names&#10;        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics&#10;        # Exit-zero treats all errors as warnings&#10;        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&#10;    &#10;    - name: Test imports&#10;      run: |&#10;        python -c &quot;import flask; print('Flask OK')&quot;&#10;        python -c &quot;import requests; print('Requests OK')&quot;&#10;        python -c &quot;from app import app; print('App imports OK')&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/.gitignore" />
              <option name="originalContent" value="# Byte-compiled / optimized / DLL files&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;&#10;# C extensions&#10;*.so&#10;&#10;# Distribution / packaging&#10;.Python&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;wheels/&#10;pip-wheel-metadata/&#10;share/python-wheels/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;MANIFEST&#10;&#10;# PyInstaller&#10;#  Usually these files are written by a python script from a template&#10;#  before PyInstaller builds the exe, so as to inject date/other infos into it.&#10;*.manifest&#10;*.spec&#10;&#10;# Installer logs&#10;pip-log.txt&#10;pip-delete-this-directory.txt&#10;&#10;# Unit test / coverage reports&#10;htmlcov/&#10;.tox/&#10;.nox/&#10;.coverage&#10;.coverage.*&#10;.cache&#10;nosetests.xml&#10;coverage.xml&#10;*.cover&#10;*.py,cover&#10;.hypothesis/&#10;.pytest_cache/&#10;&#10;# Translations&#10;*.mo&#10;*.pot&#10;&#10;# Django stuff:&#10;*.log&#10;local_settings.py&#10;db.sqlite3&#10;db.sqlite3-journal&#10;&#10;# Flask stuff:&#10;instance/&#10;.webassets-cache&#10;&#10;# Scrapy stuff:&#10;.scrapy&#10;&#10;# Sphinx documentation&#10;docs/_build/&#10;&#10;# PyBuilder&#10;target/&#10;&#10;# Jupyter Notebook&#10;.ipynb_checkpoints&#10;&#10;# IPython&#10;profile_default/&#10;ipython_config.py&#10;&#10;# pyenv&#10;.python-version&#10;&#10;# pipenv&#10;#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.&#10;#   However, in case of collaboration, if having platform-specific dependencies or dependencies&#10;#   having no cross-platform support, pipenv may install dependencies that don't work, or not&#10;#   install all needed dependencies.&#10;#Pipfile.lock&#10;&#10;# PEP 582; used by e.g. github.com/David-OConnor/pyflow&#10;__pypackages__/&#10;&#10;# Celery stuff&#10;celerybeat-schedule&#10;celerybeat.pid&#10;&#10;# SageMath parsed files&#10;*.sage.py&#10;&#10;# Environments&#10;.env&#10;.venv&#10;env/&#10;venv/&#10;ENV/&#10;env.bak/&#10;venv.bak/&#10;&#10;# Spyder project settings&#10;.spyderproject&#10;.spyproject&#10;&#10;# Rope project settings&#10;.ropeproject&#10;&#10;# mkdocs documentation&#10;/site&#10;&#10;# mypy&#10;.mypy_cache/&#10;.dmypy.json&#10;dmypy.json&#10;&#10;# Pyre type checker&#10;.pyre/&#10;&#10;# Configuration files with sensitive data&#10;config.py&#10;*.env&#10;.env*&#10;&#10;# IDE files&#10;.vscode/&#10;.idea/&#10;*.swp&#10;*.swo&#10;&#10;# macOS files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Project specific&#10;uploads/&#10;*.log&#10;" />
              <option name="updatedContent" value="# Byte-compiled / optimized / DLL files&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;&#10;# C extensions&#10;*.so&#10;&#10;# Distribution / packaging&#10;.Python&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;wheels/&#10;pip-wheel-metadata/&#10;share/python-wheels/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;MANIFEST&#10;&#10;# PyInstaller&#10;#  Usually these files are written by a python script from a template&#10;#  before PyInstaller builds the exe, so as to inject date/other infos into it.&#10;*.manifest&#10;*.spec&#10;&#10;# Installer logs&#10;pip-log.txt&#10;pip-delete-this-directory.txt&#10;&#10;# Unit test / coverage reports&#10;htmlcov/&#10;.tox/&#10;.nox/&#10;.coverage&#10;.coverage.*&#10;.cache&#10;nosetests.xml&#10;coverage.xml&#10;*.cover&#10;*.py,cover&#10;.hypothesis/&#10;.pytest_cache/&#10;&#10;# Translations&#10;*.mo&#10;*.pot&#10;&#10;# Django stuff:&#10;*.log&#10;local_settings.py&#10;db.sqlite3&#10;db.sqlite3-journal&#10;&#10;# Flask stuff:&#10;instance/&#10;.webassets-cache&#10;&#10;# Scrapy stuff:&#10;.scrapy&#10;&#10;# Sphinx documentation&#10;docs/_build/&#10;&#10;# PyBuilder&#10;target/&#10;&#10;# Jupyter Notebook&#10;.ipynb_checkpoints&#10;&#10;# IPython&#10;profile_default/&#10;ipython_config.py&#10;&#10;# pyenv&#10;.python-version&#10;&#10;# pipenv&#10;#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.&#10;#   However, in case of collaboration, if having platform-specific dependencies or dependencies&#10;#   having no cross-platform support, pipenv may install dependencies that don't work, or not&#10;#   install all needed dependencies.&#10;#Pipfile.lock&#10;&#10;# PEP 582; used by e.g. github.com/David-OConnor/pyflow&#10;__pypackages__/&#10;&#10;# Celery stuff&#10;celerybeat-schedule&#10;celerybeat.pid&#10;&#10;# SageMath parsed files&#10;*.sage.py&#10;&#10;# Environments&#10;.env&#10;.venv&#10;env/&#10;venv/&#10;ENV/&#10;env.bak/&#10;venv.bak/&#10;&#10;# Spyder project settings&#10;.spyderproject&#10;.spyproject&#10;&#10;# Rope project settings&#10;.ropeproject&#10;&#10;# mkdocs documentation&#10;/site&#10;&#10;# mypy&#10;.mypy_cache/&#10;.dmypy.json&#10;dmypy.json&#10;&#10;# Pyre type checker&#10;.pyre/&#10;&#10;# Configuration files with sensitive data&#10;config.py&#10;*.env&#10;.env*&#10;&#10;# IDE files&#10;.vscode/&#10;.idea/&#10;*.swp&#10;*.swo&#10;&#10;# macOS files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Project specific&#10;uploads/&#10;*.log&#10;PRE_UPLOAD_CHECKLIST.md" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/CHANGELOG.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/CHANGELOG.md" />
              <option name="updatedContent" value="# Changelog&#10;&#10;All notable changes to this project will be documented in this file.&#10;&#10;The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),&#10;and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).&#10;&#10;## [Unreleased]&#10;&#10;### Added&#10;- Initial release of Canvas Announcer&#10;- PyQt5 desktop application interface&#10;- Flask web interface as fallback&#10;- File attachment support for announcements&#10;- Rich text editing with TinyMCE&#10;- Course selection interface&#10;- Announcement scheduling functionality&#10;- Smart warnings for missing attachments&#10;- Automatic assignment integration&#10;- Multiple installation methods for PyQt5&#10;&#10;### Features&#10;- Desktop and web-based interfaces&#10;- Canvas API integration&#10;- File upload and attachment&#10;- Scheduled publishing&#10;- Assignment deadline integration&#10;- Warning system for attachment mentions&#10;&#10;### Dependencies&#10;- Python 3.7+&#10;- PyQt5 5.15.9&#10;- Flask 2.3.3&#10;- TinyMCE API integration&#10;- Canvas LMS API&#10;&#10;## [1.0.0] - 2025-08-03&#10;&#10;### Added&#10;- Initial project structure&#10;- Basic Canvas API integration&#10;- Announcement creation functionality" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/CONTRIBUTING.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/CONTRIBUTING.md" />
              <option name="updatedContent" value="# Contributing to Canvas Announcer&#10;&#10;Thank you for considering contributing to Canvas Announcer! This document provides guidelines for contributing to the project.&#10;&#10;## Code of Conduct&#10;&#10;This project adheres to a code of conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.&#10;&#10;## How Can I Contribute?&#10;&#10;### Reporting Bugs&#10;&#10;Before creating bug reports, please check the existing issues to avoid duplicates. When creating a bug report, include:&#10;&#10;- **Use a clear and descriptive title**&#10;- **Describe the exact steps to reproduce the problem**&#10;- **Provide specific examples to demonstrate the steps**&#10;- **Describe the behavior you observed after following the steps**&#10;- **Explain which behavior you expected to see instead and why**&#10;- **Include screenshots if possible**&#10;- **Include your environment details**:&#10;  - OS version (macOS, Windows, Linux)&#10;  - Python version&#10;  - PyQt5 version&#10;  - Canvas instance type&#10;&#10;### Suggesting Enhancements&#10;&#10;Enhancement suggestions are welcome! Please provide:&#10;&#10;- **Use a clear and descriptive title**&#10;- **Provide a step-by-step description of the suggested enhancement**&#10;- **Provide specific examples to demonstrate the enhancement**&#10;- **Describe the current behavior and explain the behavior you expected**&#10;- **Explain why this enhancement would be useful**&#10;&#10;### Pull Requests&#10;&#10;1. **Fork the repository**&#10;2. **Create a feature branch** from `main`:&#10;   ```bash&#10;   git checkout -b feature/your-feature-name&#10;   ```&#10;3. **Make your changes**&#10;4. **Test your changes thoroughly**&#10;5. **Commit your changes** with descriptive messages:&#10;   ```bash&#10;   git commit -m &quot;Add feature: descriptive message&quot;&#10;   ```&#10;6. **Push to your branch**:&#10;   ```bash&#10;   git push origin feature/your-feature-name&#10;   ```&#10;7. **Create a Pull Request**&#10;&#10;## Development Setup&#10;&#10;1. **Clone your fork**:&#10;   ```bash&#10;   git clone https://github.com/yourusername/canannounce.git&#10;   cd canannounce&#10;   ```&#10;&#10;2. **Create a virtual environment**:&#10;   ```bash&#10;   python3 -m venv venv&#10;   source venv/bin/activate  # On Windows: venv\Scripts\activate&#10;   ```&#10;&#10;3. **Install dependencies**:&#10;   ```bash&#10;   ./install_dependencies.sh&#10;   # OR manually:&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;4. **Set up configuration**:&#10;   ```bash&#10;   cp config_template.py config.py&#10;   # Edit config.py with your test credentials&#10;   ```&#10;&#10;## Coding Standards&#10;&#10;### Python Style&#10;- Follow [PEP 8](https://www.python.org/dev/peps/pep-0008/)&#10;- Use meaningful variable and function names&#10;- Add docstrings to functions and classes&#10;- Keep functions focused and small&#10;&#10;### File Organization&#10;- Keep related functionality in appropriate modules&#10;- Use relative imports within the project&#10;- Maintain consistent file structure&#10;&#10;### Testing&#10;- Test your changes thoroughly before submitting&#10;- Include both positive and negative test cases&#10;- Test with different Canvas instances if possible&#10;&#10;## Project Structure&#10;&#10;```&#10;canannounce/&#10;├── main.py                 # Desktop app entry point&#10;├── main_web.py            # Web-only entry point&#10;├── app.py                 # Flask application&#10;├── config_template.py     # Configuration template&#10;├── announcement_utils.py  # Announcement utilities&#10;├── course_utils.py        # Course management utilities&#10;├── templates/             # HTML templates&#10;│   ├── modal.html&#10;│   └── select_course.html&#10;├── static/                # Static assets&#10;│   └── styles.css&#10;└── utils/                 # Additional utilities&#10;```&#10;&#10;## Commit Message Guidelines&#10;&#10;Use clear and meaningful commit messages:&#10;&#10;- **feat**: A new feature&#10;- **fix**: A bug fix&#10;- **docs**: Documentation only changes&#10;- **style**: Changes that don't affect code meaning (formatting, etc.)&#10;- **refactor**: Code changes that neither fix bugs nor add features&#10;- **test**: Adding missing tests or correcting existing tests&#10;- **chore**: Changes to build process or auxiliary tools&#10;&#10;Examples:&#10;```&#10;feat: add support for announcement templates&#10;fix: resolve PyQt5 installation issues on Apple Silicon&#10;docs: update README with troubleshooting section&#10;```&#10;&#10;## Security Considerations&#10;&#10;- **Never commit sensitive data** (API tokens, passwords)&#10;- **Use config_template.py** for example configurations&#10;- **Validate all user inputs** in form handlers&#10;- **Follow Canvas API best practices**&#10;&#10;## Questions?&#10;&#10;If you have questions about contributing, please:&#10;1. Check existing issues and discussions&#10;2. Create a new issue with the &quot;question&quot; label&#10;3. Be specific about what you need help with&#10;&#10;Thank you for contributing to Canvas Announcer!" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/LICENSE">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/LICENSE" />
              <option name="originalContent" value="MIT License&#10;&#10;Copyright (c) 2025 Canvas Announcer&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE.&#10;" />
              <option name="updatedContent" value="MIT License&#10;&#10;Copyright (c) 2025 Can Announce&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/PRE_UPLOAD_CHECKLIST.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/PRE_UPLOAD_CHECKLIST.md" />
              <option name="updatedContent" value="# Pre-Upload GitHub Checklist&#10;&#10;## ✅ Security &amp; Configuration&#10;- [x] `config.py` added to `.gitignore`&#10;- [x] `config_template.py` created with dummy values and clear instructions&#10;- [x] No sensitive data (API tokens) in any committed files&#10;- [x] Security policy (`SECURITY.md`) created&#10;&#10;## ✅ Documentation&#10;- [x] Comprehensive `README.md` with installation, setup, and usage instructions&#10;- [x] `CHANGELOG.md` for version tracking&#10;- [x] `CONTRIBUTING.md` with development guidelines&#10;- [x] License file exists (`LICENSE`)&#10;&#10;## ✅ GitHub Integration&#10;- [x] Issue templates (bug report, feature request)&#10;- [x] Pull request template&#10;- [x] CI/CD workflow (`.github/workflows/ci.yml`)&#10;- [x] Proper `.gitignore` file&#10;&#10;## ✅ Installation &amp; Setup&#10;- [x] `requirements.txt` with all dependencies&#10;- [x] `install_dependencies.sh` for PyQt5 installation&#10;- [x] `setup.sh` for complete project setup&#10;- [x] Multiple installation methods documented&#10;&#10;## ✅ Code Quality&#10;- [x] Import issues fixed (ANNOUNCEMENT_PUBLISH vs ANNOUNCEMENT_NOW)&#10;- [x] Main application entry points work (`main.py`, `main_web.py`)&#10;- [x] Python package structure (`__init__.py`)&#10;- [x] Clear project structure&#10;&#10;##  Final Steps Before Upload&#10;&#10;1. **Test the installation process:**&#10;   ```bash&#10;   chmod +x setup.sh&#10;   ./setup.sh&#10;   ```&#10;&#10;2. **Verify both entry points work:**&#10;   ```bash&#10;   python main.py      # Desktop version&#10;   python main_web.py  # Web version&#10;   ```&#10;&#10;3. **Remove any test config files:**&#10;   ```bash&#10;   # Make sure config.py is not committed&#10;   git status&#10;   ```&#10;&#10;4. **Create initial commit:**&#10;   ```bash&#10;   git add .&#10;   git commit -m &quot;Initial release: Canvas Announcer v1.0.0&quot;&#10;   ```&#10;&#10;##  Repository Settings Checklist&#10;&#10;After uploading to GitHub:&#10;&#10;- [ ] Set repository description&#10;- [ ] Add topics/tags: `canvas`, `lms`, `pyqt5`, `flask`, `education`&#10;- [ ] Enable Issues&#10;- [ ] Enable Wiki (optional)&#10;- [ ] Set up branch protection rules for `main`&#10;- [ ] Add repository social preview image (optional)&#10;&#10;##  Ready for GitHub!&#10;&#10;Your Canvas Announcer project is now fully prepared for GitHub upload with:&#10;- Complete documentation&#10;- Security best practices&#10;- Professional GitHub integration&#10;- Multiple installation options&#10;- Comprehensive user support" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/README.md" />
              <option name="originalContent" value="# Can Announce&#10;&#10;A PyQt5-based desktop application for creating and publishing announcements to Canvas LMS with file attachment support.&#10;&#10;## Features&#10;&#10;-  **Course Selection**: Choose from your Canvas courses with an intuitive interface&#10;-  **Rich Text Editor**: Create announcements with TinyMCE's powerful editor&#10;-  **File Attachments**: Upload and attach files directly to announcements&#10;- ⏰ **Scheduling**: Schedule announcements for future publication&#10;- ⚠️ **Smart Warnings**: Alerts when mentioning attachments without uploading files&#10;-  **Assignment Integration**: Automatically includes upcoming assignments&#10;&#10;## Requirements&#10;&#10;- Python 3.7+&#10;- Canvas API token&#10;- TinyMCE API key (free tier available)&#10;- PyQt5 (for desktop interface)&#10;&#10;## Installation&#10;&#10;### Quick Install (Recommended)&#10;```bash&#10;git clone https://github.com/yourusername/canannounce.git&#10;cd canannounce&#10;chmod +x install_dependencies.sh&#10;./install_dependencies.sh&#10;```&#10;&#10;### Manual Installation&#10;```bash&#10;# Install system dependencies (macOS)&#10;brew install qt@5&#10;&#10;# Install Python dependencies&#10;pip install -r requirements.txt&#10;```&#10;&#10;## Setup&#10;&#10;1. **Copy the configuration template:**&#10;   ```bash&#10;   cp config_template.py config.py&#10;   ```&#10;&#10;2. **Get your Canvas API token:**&#10;   - Log into Canvas → Account → Settings&#10;   - Scroll to &quot;Approved Integrations&quot;&#10;   - Click &quot;+ New Access Token&quot;&#10;   - Enter purpose: &quot;Can Announce&quot;&#10;   - Copy the generated token&#10;&#10;3. **Get TinyMCE API key (free):**&#10;   - Visit [tiny.cloud](https://www.tiny.cloud/)&#10;   - Sign up for free account&#10;   - Copy API key from dashboard&#10;&#10;4. **Configure the app:**&#10;   Edit `config.py` with your credentials:&#10;   ```python&#10;   CANVAS_TOKEN = 'your_canvas_api_token_here'&#10;   CANVAS_BASE_URL = 'https://your-institution.instructure.com'&#10;   TINYMCE_API_KEY = 'your_tinymce_api_key_here'&#10;   ```&#10;&#10;## Usage&#10;&#10;### Desktop Application (Recommended)&#10;```bash&#10;python main.py&#10;```&#10;&#10;### Web Interface Only&#10;```bash&#10;python main_web.py&#10;```&#10;&#10;## Configuration Options&#10;&#10;| Setting | Description | Default |&#10;|---------|-------------|---------|&#10;| `ANNOUNCEMENT_PUBLISH` | Publish immediately when no date selected | `False` |&#10;| `DEFAULT_COURSE_ID` | Default course ID | `''` |&#10;| `UPCOMING_ASSIGNMENT_DAYS` | Days ahead to fetch assignments | `60` |&#10;&#10;## Troubleshooting&#10;&#10;### PyQt5 Installation Issues&#10;If you encounter &quot;metadata-generation-failed&quot; errors:&#10;```bash&#10;# Try the automated installer&#10;./install_dependencies.sh&#10;&#10;# Or install Qt system libraries first&#10;brew install qt@5&#10;pip install PyQt5&#10;```&#10;&#10;### Canvas API Connection Issues&#10;- Verify your Canvas base URL (no trailing slash)&#10;- Check that your API token hasn't expired&#10;- Ensure your token has proper permissions&#10;&#10;## Project Structure&#10;&#10;```&#10;canannounce/&#10;├── main.py              # Desktop application entry point&#10;├── main_web.py          # Web-only version&#10;├── app.py               # Flask web server&#10;├── config_template.py   # Configuration template&#10;├── requirements.txt     # Python dependencies&#10;├── install_dependencies.sh  # Automated installer&#10;├── templates/           # HTML templates&#10;├── static/             # CSS and JS files&#10;└── utils/              # Utility modules&#10;```&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;## Security Notes&#10;&#10;- Never commit `config.py` to version control&#10;- Keep your Canvas API token secure&#10;- The TinyMCE API key can be shared (it's domain-restricted)&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## Acknowledgments&#10;&#10;- Built with [Flask](https://flask.palletsprojects.com/) and [PyQt5](https://pypi.org/project/PyQt5/)&#10;- Rich text editing powered by [TinyMCE](https://www.tiny.cloud/)&#10;- Canvas LMS integration via [Canvas API](https://canvas.instructure.com/doc/api/)&#10;&#10;## Support&#10;&#10;If you encounter issues:&#10;1. Check the [Troubleshooting](#troubleshooting) section&#10;2. Search existing [Issues](https://github.com/yourusername/canannounce/issues)&#10;3. Create a new issue with detailed information&#10;" />
              <option name="updatedContent" value="# Can Announce&#10;&#10;A desktop application for creating and publishing announcements to Canvas LMS with file attachment support.&#10;&#10;## Features&#10;&#10;-  **Course Selection**: Choose from your Canvas courses with an intuitive interface&#10;-  **Rich Text Editor**: Create announcements with TinyMCE's powerful editor&#10;-  **File Attachments**: Upload and attach files directly to announcements&#10;- ⏰ **Scheduling**: Schedule announcements for future publication&#10;- ⚠️ **Smart Warnings**: Alerts when mentioning attachments without uploading files&#10;-  **Assignment Integration**: Automatically includes upcoming assignments&#10;&#10;## Requirements&#10;&#10;- Python 3.7+&#10;- Canvas API token&#10;- TinyMCE API key (free tier available)&#10;- PyQt5 (for desktop interface)&#10;&#10;## Installation&#10;&#10;### Quick Install (Recommended)&#10;```bash&#10;git clone https://github.com/yourusername/canannounce.git&#10;cd canannounce&#10;chmod +x install_dependencies.sh&#10;./install_dependencies.sh&#10;```&#10;&#10;### Manual Installation&#10;```bash&#10;# Install system dependencies (macOS)&#10;brew install qt@5&#10;&#10;# Install Python dependencies&#10;pip install -r requirements.txt&#10;```&#10;&#10;## Setup&#10;&#10;1. **Copy the configuration template:**&#10;   ```bash&#10;   cp config_template.py config.py&#10;   ```&#10;&#10;2. **Get your Canvas API token:**&#10;   - Log into Canvas → Account → Settings&#10;   - Scroll to &quot;Approved Integrations&quot;&#10;   - Click &quot;+ New Access Token&quot;&#10;   - Enter purpose: &quot;Can Announce&quot;&#10;   - Copy the generated token&#10;&#10;3. **Get TinyMCE API key (free):**&#10;   - Visit [tiny.cloud](https://www.tiny.cloud/)&#10;   - Sign up for free account&#10;   - Copy API key from dashboard&#10;&#10;4. **Configure the app:**&#10;   Edit `config.py` with your credentials:&#10;   ```python&#10;   CANVAS_TOKEN = 'your_canvas_api_token_here'&#10;   CANVAS_BASE_URL = 'https://your-institution.instructure.com'&#10;   TINYMCE_API_KEY = 'your_tinymce_api_key_here'&#10;   ```&#10;&#10;## Usage&#10;&#10;### Desktop Application (Recommended)&#10;```bash&#10;python main.py&#10;```&#10;&#10;### Web Interface Only&#10;```bash&#10;python main_web.py&#10;```&#10;&#10;## Configuration Options&#10;&#10;| Setting | Description | Default |&#10;|---------|-------------|---------|&#10;| `ANNOUNCEMENT_PUBLISH` | Publish immediately when no date selected | `False` |&#10;| `DEFAULT_COURSE_ID` | Default course ID | `''` |&#10;| `UPCOMING_ASSIGNMENT_DAYS` | Days ahead to fetch assignments | `60` |&#10;&#10;## Troubleshooting&#10;&#10;### PyQt5 Installation Issues&#10;If you encounter &quot;metadata-generation-failed&quot; errors:&#10;```bash&#10;# Try the automated installer&#10;./install_dependencies.sh&#10;&#10;# Or install Qt system libraries first&#10;brew install qt@5&#10;pip install PyQt5&#10;```&#10;&#10;### Canvas API Connection Issues&#10;- Verify your Canvas base URL (no trailing slash)&#10;- Check that your API token hasn't expired&#10;- Ensure your token has proper permissions&#10;&#10;## Project Structure&#10;&#10;```&#10;canannounce/&#10;├── main.py              # Desktop application entry point&#10;├── main_web.py          # Web-only version&#10;├── app.py               # Flask web server&#10;├── config_template.py   # Configuration template&#10;├── requirements.txt     # Python dependencies&#10;├── install_dependencies.sh  # Automated installer&#10;├── templates/           # HTML templates&#10;├── static/             # CSS and JS files&#10;└── utils/              # Utility modules&#10;```&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;## Security Notes&#10;&#10;- Never commit `config.py` to version control&#10;- Keep your Canvas API token secure&#10;- The TinyMCE API key can be shared (it's domain-restricted)&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## Acknowledgments&#10;&#10;- Built with [Flask](https://flask.palletsprojects.com/) and [PyQt5](https://pypi.org/project/PyQt5/)&#10;- Rich text editing powered by [TinyMCE](https://www.tiny.cloud/)&#10;- Canvas LMS integration via [Canvas API](https://canvas.instructure.com/doc/api/)&#10;&#10;## Support&#10;&#10;If you encounter issues:&#10;1. Check the [Troubleshooting](#troubleshooting) section&#10;2. Search existing [Issues](https://github.com/yourusername/canannounce/issues)&#10;3. Create a new issue with detailed information" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/SECURITY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/SECURITY.md" />
              <option name="updatedContent" value="# Security Policy&#10;&#10;## Supported Versions&#10;&#10;| Version | Supported          |&#10;| ------- | ------------------ |&#10;| 1.0.x   | :white_check_mark: |&#10;&#10;## Reporting a Vulnerability&#10;&#10;We take security seriously. If you discover a security vulnerability, please follow these steps:&#10;&#10;### Do NOT create a public issue&#10;&#10;Security vulnerabilities should not be reported through public GitHub issues.&#10;&#10;### How to Report&#10;&#10;1. **Email**: Send details to [your-email@example.com]&#10;2. **Include**:&#10;   - Description of the vulnerability&#10;   - Steps to reproduce&#10;   - Potential impact&#10;   - Your contact information&#10;&#10;### What to Expect&#10;&#10;- **Acknowledgment**: Within 48 hours&#10;- **Initial Response**: Within 1 week&#10;- **Resolution Timeline**: Varies based on severity&#10;&#10;### Security Considerations&#10;&#10;This application handles:&#10;- **Canvas API Tokens**: Stored in local config files&#10;- **File Uploads**: Temporary files processed locally&#10;- **Network Requests**: To Canvas LMS and TinyMCE APIs&#10;&#10;### Best Practices for Users&#10;&#10;- Keep your Canvas API token secure&#10;- Don't commit `config.py` to version control&#10;- Use the latest version of the application&#10;- Run the application in a secure environment&#10;&#10;### Disclosure Policy&#10;&#10;- We will coordinate with you on disclosure timing&#10;- Credit will be given for responsible disclosure&#10;- We aim to fix critical issues within 30 days" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/__init__.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Canvas Announcer - A PyQt5-based desktop application for Canvas LMS announcements&#10;&quot;&quot;&quot;&#10;&#10;__version__ = &quot;1.0.0&quot;&#10;__author__ = &quot;Your Name&quot;&#10;__email__ = &quot;your.email@example.com&quot;&#10;__description__ = &quot;Desktop application for creating and publishing Canvas LMS announcements&quot;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Can Announce - A PyQt5-based desktop application for Canvas LMS announcements&#10;&quot;&quot;&quot;&#10;&#10;__version__ = &quot;1.0.0&quot;&#10;__author__ = &quot;Your Name&quot;&#10;__email__ = &quot;your.email@example.com&quot;&#10;__description__ = &quot;Desktop application for creating and publishing Canvas LMS announcements&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/app.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/app.py" />
              <option name="originalContent" value="from flask import Flask, render_template, request, jsonify&#10;import os&#10;from announcement_utils import upload_file_to_course, calculate_trimmed_title&#10;from course_utils import get_upcoming_assignments, get_canvas_courses, get_course_details&#10;from config import canvas_token, canvas_base_url, ANNOUNCEMENT_NOW, TINYMCE_API_KEY&#10;from datetime import datetime, timedelta, timezone&#10;import requests&#10;import sys&#10;&#10;# Ensure Flask serves the static folder correctly&#10;app = Flask(__name__, static_url_path='/static', static_folder='static', template_folder='templates')&#10;&#10;@app.route('/')&#10;def index():&#10;    course_id = request.args.get('course_id', '')&#10;    course_name = request.args.get('course_name', 'Unnamed Course')&#10;    upcoming_assignments = get_upcoming_assignments(canvas_token, canvas_base_url, course_id)&#10;&#10;    # Log a warning if course_name is missing&#10;    if course_name == 'Unnamed Course':&#10;        print(&quot;Warning: course_name is missing. Ensure it is passed as a query parameter.&quot;)&#10;&#10;    # Fetch course details if course_name is missing&#10;    if course_name == 'Unnamed Course' and course_id:&#10;        course_details = get_course_details(canvas_token, canvas_base_url, course_id)&#10;        if course_details and 'name' in course_details:&#10;            course_name = course_details['name']&#10;        else:&#10;            print(&quot;Warning: Failed to fetch course name from Canvas API.&quot;)&#10;&#10;    # Determine publish date - default to 5 minutes from now in CDT&#10;    cdt = timezone(timedelta(hours=-5))  # CDT is UTC-5&#10;    now_cdt = datetime.now(cdt)&#10;    future_date_cdt = now_cdt + timedelta(minutes=5)&#10;    # Format for datetime-local input (browser expects local time without timezone info)&#10;    default_publish_datetime = future_date_cdt.strftime('%Y-%m-%dT%H:%M')&#10;&#10;    # Prepare default body text&#10;    default_body = &quot;&lt;p&gt;&lt;a href='[FILE_URL_PLACEHOLDER]'&gt;Today's slides are here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ENTER BODY TEXT&lt;/p&gt;\n\n&quot;&#10;    if upcoming_assignments:&#10;        assignments_html = '\n'.join(&#10;            [f&quot;&lt;li&gt;{assignment['name']} (Due: {assignment['due_at']})&lt;/li&gt;&quot; for assignment in upcoming_assignments]&#10;        )&#10;        default_body += f&quot;&lt;p&gt;&lt;b&gt;Upcoming Assignments:&lt;/b&gt;&lt;/p&gt;\n&lt;ul&gt;\n{assignments_html}\n&lt;/ul&gt;&quot;&#10;&#10;    # Use the utility function to calculate the default title&#10;    default_title = calculate_trimmed_title(course_name).replace('Slides from', 'Slides from today')&#10;&#10;    return render_template('modal.html', course_name=course_name, publish_date=None, default_body=default_body, default_title=default_title, tinymce_api_key=TINYMCE_API_KEY, default_publish_datetime=default_publish_datetime)&#10;&#10;@app.route('/submit', methods=['POST'])&#10;def submit_announcement():&#10;    try:&#10;        data = request.form&#10;        title = data.get('title')&#10;        body = data.get('body')&#10;        file = request.files.get('file')&#10;        course_id = data.get('course_id')&#10;        force_submit = data.get('force_submit', 'false').lower() == 'true'&#10;&#10;        if 'ENTER BODY TEXT' in body:&#10;            return jsonify({'error': 'Please replace the placeholder text before submitting.'}), 400&#10;&#10;        file_url = None&#10;        if file and file.filename:&#10;            # Create uploads directory if it doesn't exist&#10;            uploads_dir = 'uploads'&#10;            if not os.path.exists(uploads_dir):&#10;                os.makedirs(uploads_dir)&#10;&#10;            file_path = os.path.join(uploads_dir, file.filename)&#10;            file.save(file_path)&#10;            file_url = upload_file_to_course(canvas_token, canvas_base_url, course_id, file_path)&#10;&#10;            # Clean up temporary file&#10;            if os.path.exists(file_path):&#10;                os.remove(file_path)&#10;&#10;        # Handle file URL replacement or removal&#10;        if file_url:&#10;            # Replace placeholder with actual file URL&#10;            body = body.replace('[FILE_URL_PLACEHOLDER]', file_url)&#10;        else:&#10;            # No file uploaded - check if title mentions slides/deck&#10;            import re&#10;            if re.search(r'\b(slides?|decks?)\b', title, re.IGNORECASE) and not force_submit:&#10;                return jsonify({&#10;                    'warning': True,&#10;                    'message': 'Your announcement title mentions an attachment but no file was uploaded. Are you sure you want to proceed?'&#10;                }), 200&#10;&#10;            # Remove the paragraph containing the file placeholder&#10;            body = re.sub(r'&lt;p&gt;&lt;a href=\'\[FILE_URL_PLACEHOLDER\]\'&gt;Today\'s slides are here&lt;/a&gt;&lt;/p&gt;\s*', '', body)&#10;            # Also handle double quotes version just in case&#10;            body = re.sub(r'&lt;p&gt;&lt;a href=&quot;\[FILE_URL_PLACEHOLDER\]&quot;&gt;Today\'s slides are here&lt;/a&gt;&lt;/p&gt;\s*', '', body)&#10;&#10;        # Determine if the announcement should be published immediately or scheduled&#10;        user_publish_date = data.get('publish_date')&#10;        delayed_post_at = None&#10;&#10;        if user_publish_date:&#10;            # User selected a specific date/time (assumed to be in CDT)&#10;            try:&#10;                # Parse the datetime-local input (YYYY-MM-DDTHH:MM)&#10;                user_datetime = datetime.fromisoformat(user_publish_date)&#10;                # Treat the input as CDT (UTC-5) and convert to UTC for Canvas API&#10;                cdt = timezone(timedelta(hours=-5))&#10;                user_datetime_cdt = user_datetime.replace(tzinfo=cdt)&#10;                user_datetime_utc = user_datetime_cdt.astimezone(timezone.utc)&#10;                delayed_post_at = user_datetime_utc.isoformat()&#10;            except ValueError:&#10;                return jsonify({'error': 'Invalid publish date format.'}), 400&#10;        elif not ANNOUNCEMENT_NOW:&#10;            # Fallback to 30 days in future if no date selected and immediate publish is disabled&#10;            delayed_post_at = (datetime.now(timezone.utc) + timedelta(days=30)).isoformat()&#10;&#10;        # Logic to post the announcement to Canvas&#10;        headers = {&#10;            'Authorization': f'Bearer {canvas_token}'&#10;        }&#10;        url = f&quot;{canvas_base_url}/api/v1/courses/{course_id}/discussion_topics&quot;&#10;        payload = {&#10;            'title': title,&#10;            'message': body,&#10;            'is_announcement': True&#10;        }&#10;        if delayed_post_at:&#10;            payload['delayed_post_at'] = delayed_post_at&#10;&#10;        response = requests.post(url, headers=headers, json=payload)&#10;        if response.status_code in (200, 201):&#10;            # Schedule app shutdown after successful submission&#10;            def shutdown_server():&#10;                import threading&#10;                import time&#10;                def delayed_shutdown():&#10;                    time.sleep(2)  # Give time for response to be sent&#10;                    try:&#10;                        # Gracefully shutdown Flask&#10;                        func = request.environ.get('werkzeug.server.shutdown')&#10;                        if func is None:&#10;                            # Fallback for different Flask/Werkzeug versions&#10;                            os.kill(os.getpid(), 9)&#10;                        else:&#10;                            func()&#10;                    except Exception:&#10;                        # Force exit if graceful shutdown fails&#10;                        os._exit(0)&#10;                thread = threading.Thread(target=delayed_shutdown)&#10;                thread.daemon = True&#10;                thread.start()&#10;&#10;            shutdown_server()&#10;            return jsonify({'success': True, 'message': 'Announcement submitted successfully!', 'shutdown': True})&#10;        else:&#10;            return jsonify({'error': 'Failed to submit announcement.', 'details': response.text}), 500&#10;&#10;    except Exception as e:&#10;        # Return JSON error response instead of HTML error page&#10;        return jsonify({'error': f'Server error: {str(e)}'}), 500&#10;&#10;@app.route('/select_course')&#10;def select_course():&#10;    # Fetch courses using the Canvas API&#10;    courses = get_canvas_courses(canvas_token, canvas_base_url)&#10;&#10;    # Ensure filtering logic completes before rendering the template&#10;    if not courses:&#10;        print(&quot;No courses available after filtering.&quot;)&#10;        return render_template('select_course.html', courses=[]), 200&#10;&#10;    # Log the filtered courses for debugging&#10;    print(&quot;Filtered courses for selection:&quot;)&#10;    for course in courses:&#10;        print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;&#10;    # Render the course selection template with the filtered courses&#10;    return render_template('select_course.html', courses=courses)&#10;&#10;@app.route('/course_selected', methods=['POST'])&#10;def course_selected():&#10;    course_id = request.form.get('course_id')&#10;    course_name = request.form.get('course_name', 'Unnamed Course')&#10;&#10;    # Debugging: Log course_name and course_id&#10;    print(f&quot;Debug: Received course_id={course_id}, course_name={course_name}&quot;)&#10;    print(f&quot;Debug: TinyMCE API Key being passed: {TINYMCE_API_KEY}&quot;)&#10;&#10;    # Get upcoming assignments for this course&#10;    upcoming_assignments = get_upcoming_assignments(canvas_token, canvas_base_url, course_id)&#10;&#10;    # Determine publish date - default to 5 minutes from now in CDT&#10;    cdt = timezone(timedelta(hours=-5))  # CDT is UTC-5&#10;    now_cdt = datetime.now(cdt)&#10;    future_date_cdt = now_cdt + timedelta(minutes=5)&#10;    # Format for datetime-local input (browser expects local time without timezone info)&#10;    default_publish_datetime = future_date_cdt.strftime('%Y-%m-%dT%H:%M')&#10;&#10;    # Prepare default body text&#10;    default_body = &quot;&lt;p&gt;&lt;a href='[FILE_URL_PLACEHOLDER]'&gt;Today's slides are here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ENTER BODY TEXT&lt;/p&gt;\n\n&quot;&#10;    if upcoming_assignments:&#10;        assignments_html = '\n'.join(&#10;            [f&quot;&lt;li&gt;{assignment['name']} (Due: {assignment['due_at']})&lt;/li&gt;&quot; for assignment in upcoming_assignments]&#10;        )&#10;        default_body += f&quot;&lt;p&gt;&lt;b&gt;Upcoming Assignments:&lt;/b&gt;&lt;/p&gt;\n&lt;ul&gt;\n{assignments_html}\n&lt;/ul&gt;&quot;&#10;&#10;    # Use the utility function to calculate the default title with proper trimming&#10;    default_title = calculate_trimmed_title(course_name)&#10;&#10;    # Redirect to the announcement creation screen&#10;    return render_template(&#10;        'modal.html',&#10;        course_name=course_name,&#10;        course_id=course_id,&#10;        publish_date=None,&#10;        default_body=default_body,&#10;        default_title=default_title,&#10;        tinymce_api_key=TINYMCE_API_KEY,&#10;        default_publish_datetime=default_publish_datetime&#10;    )&#10;&#10;@app.route('/debug_static')&#10;def debug_static():&#10;    return app.send_static_file('styles.css')&#10;&#10;@app.route('/debug_courses')&#10;def debug_courses():&#10;    courses = get_canvas_courses(canvas_token, canvas_base_url)&#10;    if not courses:&#10;        return jsonify({'error': 'No courses fetched from Canvas API'}), 500&#10;&#10;    filtered_courses = filter_courses_by_role(canvas_token, canvas_base_url, courses, role=&quot;teacher&quot;)&#10;    if not filtered_courses:&#10;        return jsonify({'error': 'No courses available after filtering by role'}), 500&#10;&#10;    return jsonify({'courses': filtered_courses}), 200&#10;&#10;if __name__ == '__main__':&#10;    import socket&#10;&#10;    # Check if port is passed as command line argument&#10;    if len(sys.argv) &gt; 1:&#10;        port = int(sys.argv[1])&#10;    else:&#10;        # Dynamically find an available port if no argument provided&#10;        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;            s.bind((&quot;127.0.0.1&quot;, 0))&#10;            port = s.getsockname()[1]&#10;&#10;    app.run(debug=True, port=port)&#10;" />
              <option name="updatedContent" value="from flask import Flask, render_template, request, jsonify&#10;import os&#10;from announcement_utils import upload_file_to_course, calculate_trimmed_title&#10;from course_utils import get_upcoming_assignments, get_canvas_courses, get_course_details&#10;from config import canvas_token, canvas_base_url, ANNOUNCEMENT_PUBLISH, TINYMCE_API_KEY&#10;from datetime import datetime, timedelta, timezone&#10;import requests&#10;import sys&#10;&#10;# Ensure Flask serves the static folder correctly&#10;app = Flask(__name__, static_url_path='/static', static_folder='static', template_folder='templates')&#10;&#10;@app.route('/')&#10;def index():&#10;    course_id = request.args.get('course_id', '')&#10;    course_name = request.args.get('course_name', 'Unnamed Course')&#10;    upcoming_assignments = get_upcoming_assignments(canvas_token, canvas_base_url, course_id)&#10;&#10;    # Log a warning if course_name is missing&#10;    if course_name == 'Unnamed Course':&#10;        print(&quot;Warning: course_name is missing. Ensure it is passed as a query parameter.&quot;)&#10;&#10;    # Fetch course details if course_name is missing&#10;    if course_name == 'Unnamed Course' and course_id:&#10;        course_details = get_course_details(canvas_token, canvas_base_url, course_id)&#10;        if course_details and 'name' in course_details:&#10;            course_name = course_details['name']&#10;        else:&#10;            print(&quot;Warning: Failed to fetch course name from Canvas API.&quot;)&#10;&#10;    # Determine publish date - default to 5 minutes from now in CDT&#10;    cdt = timezone(timedelta(hours=-5))  # CDT is UTC-5&#10;    now_cdt = datetime.now(cdt)&#10;    future_date_cdt = now_cdt + timedelta(minutes=5)&#10;    # Format for datetime-local input (browser expects local time without timezone info)&#10;    default_publish_datetime = future_date_cdt.strftime('%Y-%m-%dT%H:%M')&#10;&#10;    # Prepare default body text&#10;    default_body = &quot;&lt;p&gt;&lt;a href='[FILE_URL_PLACEHOLDER]'&gt;Today's slides are here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ENTER BODY TEXT&lt;/p&gt;\n\n&quot;&#10;    if upcoming_assignments:&#10;        assignments_html = '\n'.join(&#10;            [f&quot;&lt;li&gt;{assignment['name']} (Due: {assignment['due_at']})&lt;/li&gt;&quot; for assignment in upcoming_assignments]&#10;        )&#10;        default_body += f&quot;&lt;p&gt;&lt;b&gt;Upcoming Assignments:&lt;/b&gt;&lt;/p&gt;\n&lt;ul&gt;\n{assignments_html}\n&lt;/ul&gt;&quot;&#10;&#10;    # Use the utility function to calculate the default title&#10;    default_title = calculate_trimmed_title(course_name).replace('Slides from', 'Slides from today')&#10;&#10;    return render_template('modal.html', course_name=course_name, publish_date=None, default_body=default_body, default_title=default_title, tinymce_api_key=TINYMCE_API_KEY, default_publish_datetime=default_publish_datetime)&#10;&#10;@app.route('/submit', methods=['POST'])&#10;def submit_announcement():&#10;    try:&#10;        data = request.form&#10;        title = data.get('title')&#10;        body = data.get('body')&#10;        file = request.files.get('file')&#10;        course_id = data.get('course_id')&#10;        force_submit = data.get('force_submit', 'false').lower() == 'true'&#10;&#10;        if 'ENTER BODY TEXT' in body:&#10;            return jsonify({'error': 'Please replace the placeholder text before submitting.'}), 400&#10;&#10;        file_url = None&#10;        if file and file.filename:&#10;            # Create uploads directory if it doesn't exist&#10;            uploads_dir = 'uploads'&#10;            if not os.path.exists(uploads_dir):&#10;                os.makedirs(uploads_dir)&#10;&#10;            file_path = os.path.join(uploads_dir, file.filename)&#10;            file.save(file_path)&#10;            file_url = upload_file_to_course(canvas_token, canvas_base_url, course_id, file_path)&#10;&#10;            # Clean up temporary file&#10;            if os.path.exists(file_path):&#10;                os.remove(file_path)&#10;&#10;        # Handle file URL replacement or removal&#10;        if file_url:&#10;            # Replace placeholder with actual file URL&#10;            body = body.replace('[FILE_URL_PLACEHOLDER]', file_url)&#10;        else:&#10;            # No file uploaded - check if title mentions slides/deck&#10;            import re&#10;            if re.search(r'\b(slides?|decks?)\b', title, re.IGNORECASE) and not force_submit:&#10;                return jsonify({&#10;                    'warning': True,&#10;                    'message': 'Your announcement title mentions an attachment but no file was uploaded. Are you sure you want to proceed?'&#10;                }), 200&#10;&#10;            # Remove the paragraph containing the file placeholder&#10;            body = re.sub(r'&lt;p&gt;&lt;a href=\'\[FILE_URL_PLACEHOLDER\]\'&gt;Today\'s slides are here&lt;/a&gt;&lt;/p&gt;\s*', '', body)&#10;            # Also handle double quotes version just in case&#10;            body = re.sub(r'&lt;p&gt;&lt;a href=&quot;\[FILE_URL_PLACEHOLDER\]&quot;&gt;Today\'s slides are here&lt;/a&gt;&lt;/p&gt;\s*', '', body)&#10;&#10;        # Determine if the announcement should be published immediately or scheduled&#10;        user_publish_date = data.get('publish_date')&#10;        delayed_post_at = None&#10;&#10;        if user_publish_date:&#10;            # User selected a specific date/time (assumed to be in CDT)&#10;            try:&#10;                # Parse the datetime-local input (YYYY-MM-DDTHH:MM)&#10;                user_datetime = datetime.fromisoformat(user_publish_date)&#10;                # Treat the input as CDT (UTC-5) and convert to UTC for Canvas API&#10;                cdt = timezone(timedelta(hours=-5))&#10;                user_datetime_cdt = user_datetime.replace(tzinfo=cdt)&#10;                user_datetime_utc = user_datetime_cdt.astimezone(timezone.utc)&#10;                delayed_post_at = user_datetime_utc.isoformat()&#10;            except ValueError:&#10;                return jsonify({'error': 'Invalid publish date format.'}), 400&#10;        elif not ANNOUNCEMENT_PUBLISH:&#10;            # Fallback to 30 days in future if no date selected and immediate publish is disabled&#10;            delayed_post_at = (datetime.now(timezone.utc) + timedelta(days=30)).isoformat()&#10;&#10;        # Logic to post the announcement to Canvas&#10;        headers = {&#10;            'Authorization': f'Bearer {canvas_token}'&#10;        }&#10;        url = f&quot;{canvas_base_url}/api/v1/courses/{course_id}/discussion_topics&quot;&#10;        payload = {&#10;            'title': title,&#10;            'message': body,&#10;            'is_announcement': True&#10;        }&#10;        if delayed_post_at:&#10;            payload['delayed_post_at'] = delayed_post_at&#10;&#10;        response = requests.post(url, headers=headers, json=payload)&#10;        if response.status_code in (200, 201):&#10;            # Schedule app shutdown after successful submission&#10;            def shutdown_server():&#10;                import threading&#10;                import time&#10;                def delayed_shutdown():&#10;                    time.sleep(2)  # Give time for response to be sent&#10;                    try:&#10;                        # Gracefully shutdown Flask&#10;                        func = request.environ.get('werkzeug.server.shutdown')&#10;                        if func is None:&#10;                            # Fallback for different Flask/Werkzeug versions&#10;                            os.kill(os.getpid(), 9)&#10;                        else:&#10;                            func()&#10;                    except Exception:&#10;                        # Force exit if graceful shutdown fails&#10;                        os._exit(0)&#10;                thread = threading.Thread(target=delayed_shutdown)&#10;                thread.daemon = True&#10;                thread.start()&#10;&#10;            shutdown_server()&#10;            return jsonify({'success': True, 'message': 'Announcement submitted successfully!', 'shutdown': True})&#10;        else:&#10;            return jsonify({'error': 'Failed to submit announcement.', 'details': response.text}), 500&#10;&#10;    except Exception as e:&#10;        # Return JSON error response instead of HTML error page&#10;        return jsonify({'error': f'Server error: {str(e)}'}), 500&#10;&#10;@app.route('/select_course')&#10;def select_course():&#10;    # Fetch courses using the Canvas API&#10;    courses = get_canvas_courses(canvas_token, canvas_base_url)&#10;&#10;    # Ensure filtering logic completes before rendering the template&#10;    if not courses:&#10;        print(&quot;No courses available after filtering.&quot;)&#10;        return render_template('select_course.html', courses=[]), 200&#10;&#10;    # Log the filtered courses for debugging&#10;    print(&quot;Filtered courses for selection:&quot;)&#10;    for course in courses:&#10;        print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;&#10;    # Render the course selection template with the filtered courses&#10;    return render_template('select_course.html', courses=courses)&#10;&#10;@app.route('/course_selected', methods=['POST'])&#10;def course_selected():&#10;    course_id = request.form.get('course_id')&#10;    course_name = request.form.get('course_name', 'Unnamed Course')&#10;&#10;    # Debugging: Log course_name and course_id&#10;    print(f&quot;Debug: Received course_id={course_id}, course_name={course_name}&quot;)&#10;    print(f&quot;Debug: TinyMCE API Key being passed: {TINYMCE_API_KEY}&quot;)&#10;&#10;    # Get upcoming assignments for this course&#10;    upcoming_assignments = get_upcoming_assignments(canvas_token, canvas_base_url, course_id)&#10;&#10;    # Determine publish date - default to 5 minutes from now in CDT&#10;    cdt = timezone(timedelta(hours=-5))  # CDT is UTC-5&#10;    now_cdt = datetime.now(cdt)&#10;    future_date_cdt = now_cdt + timedelta(minutes=5)&#10;    # Format for datetime-local input (browser expects local time without timezone info)&#10;    default_publish_datetime = future_date_cdt.strftime('%Y-%m-%dT%H:%M')&#10;&#10;    # Prepare default body text&#10;    default_body = &quot;&lt;p&gt;&lt;a href='[FILE_URL_PLACEHOLDER]'&gt;Today's slides are here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ENTER BODY TEXT&lt;/p&gt;\n\n&quot;&#10;    if upcoming_assignments:&#10;        assignments_html = '\n'.join(&#10;            [f&quot;&lt;li&gt;{assignment['name']} (Due: {assignment['due_at']})&lt;/li&gt;&quot; for assignment in upcoming_assignments]&#10;        )&#10;        default_body += f&quot;&lt;p&gt;&lt;b&gt;Upcoming Assignments:&lt;/b&gt;&lt;/p&gt;\n&lt;ul&gt;\n{assignments_html}\n&lt;/ul&gt;&quot;&#10;&#10;    # Use the utility function to calculate the default title with proper trimming&#10;    default_title = calculate_trimmed_title(course_name)&#10;&#10;    # Redirect to the announcement creation screen&#10;    return render_template(&#10;        'modal.html',&#10;        course_name=course_name,&#10;        course_id=course_id,&#10;        publish_date=None,&#10;        default_body=default_body,&#10;        default_title=default_title,&#10;        tinymce_api_key=TINYMCE_API_KEY,&#10;        default_publish_datetime=default_publish_datetime&#10;    )&#10;&#10;@app.route('/debug_static')&#10;def debug_static():&#10;    return app.send_static_file('styles.css')&#10;&#10;@app.route('/debug_courses')&#10;def debug_courses():&#10;    courses = get_canvas_courses(canvas_token, canvas_base_url)&#10;    if not courses:&#10;        return jsonify({'error': 'No courses fetched from Canvas API'}), 500&#10;&#10;    filtered_courses = filter_courses_by_role(canvas_token, canvas_base_url, courses, role=&quot;teacher&quot;)&#10;    if not filtered_courses:&#10;        return jsonify({'error': 'No courses available after filtering by role'}), 500&#10;&#10;    return jsonify({'courses': filtered_courses}), 200&#10;&#10;if __name__ == '__main__':&#10;    import socket&#10;&#10;    # Check if port is passed as command line argument&#10;    if len(sys.argv) &gt; 1:&#10;        port = int(sys.argv[1])&#10;    else:&#10;        # Dynamically find an available port if no argument provided&#10;        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;            s.bind((&quot;127.0.0.1&quot;, 0))&#10;            port = s.getsockname()[1]&#10;&#10;    app.run(debug=True, port=port)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/canvas_announcer/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/canvas_announcer/__init__.py" />
              <option name="originalContent" value="# Canvas Announcer Package&#10;&#10;" />
              <option name="updatedContent" value="# Can Announce Package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/config_template.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/config_template.py" />
              <option name="originalContent" value="# config_template.py&#10;# Configuration template for Canvas Announcer&#10;#&#10;# INSTRUCTIONS:&#10;# 1. Copy this file to 'config.py' in the same directory&#10;# 2. Replace all dummy values with your actual credentials and settings&#10;# 3. Never commit the actual config.py file to version control&#10;&#10;# ==============================================================================&#10;# CANVAS API CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Your Canvas API access token&#10;# To get this token:&#10;# 1. Log into your Canvas instance&#10;# 2. Go to Account → Settings&#10;# 3. Scroll down to &quot;Approved Integrations&quot;&#10;# 4. Click &quot;+ New Access Token&quot;&#10;# 5. Enter a purpose (e.g., &quot;Canvas Announcer App&quot;)&#10;# 6. Set expiration date (optional)&#10;# 7. Click &quot;Generate Token&quot; and copy the token&#10;CANVAS_TOKEN = 'your_canvas_api_token_here_1234567890abcdefghijklmnopqrstuvwxyz'&#10;&#10;# Your institution's Canvas base URL&#10;# Examples:&#10;#   - https://canvas.instructure.com (for Canvas Cloud)&#10;#   - https://youruniversity.instructure.com&#10;#   - https://canvas.yourschool.edu&#10;# DO NOT include trailing slash&#10;CANVAS_BASE_URL = 'https://your-institution.instructure.com'&#10;&#10;# ==============================================================================&#10;# COURSE CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Default course ID to use if none is provided&#10;# You can find this in the URL when viewing a course:&#10;# https://your-canvas.com/courses/123456 (the number is the course ID)&#10;# This is optional - leave as empty string if not needed&#10;DEFAULT_COURSE_ID = '123456'&#10;&#10;# Number of days to look ahead for upcoming assignments&#10;# These assignments will be automatically included in announcement templates&#10;UPCOMING_ASSIGNMENT_DAYS = 5&#10;&#10;# ==============================================================================&#10;# TINYMCE EDITOR CONFIGURATION&#10;# ==============================================================================&#10;&#10;# TinyMCE API key for the rich text editor&#10;# To get this key:&#10;# 1. Go to https://www.tiny.cloud/&#10;# 2. Sign up for a free account&#10;# 3. Go to the Dashboard&#10;# 4. Copy your API key from the &quot;API Key&quot; section&#10;# The free tier allows up to 1,000 loads per month&#10;TINYMCE_API_KEY = 'your_tinymce_api_key_here_abcdefghijklmnopqrstuvwxyz123456'&#10;&#10;# ==============================================================================&#10;# ANNOUNCEMENT PUBLISHING CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Controls what happens when no publish date is selected in the datepicker&#10;# Set to True: Publish announcements immediately when no date is selected&#10;# Set to False: Schedule announcements 30 days in the future when no date is selected&#10;#&#10;# NOTE: This setting does NOT disable the datepicker. Users can always override&#10;# this behavior by selecting a specific date/time in the datepicker interface.&#10;# This only affects the fallback behavior when the datepicker is left empty.&#10;ANNOUNCEMENT_NOW = False&#10;&#10;# ==============================================================================&#10;# ADDITIONAL NOTES&#10;# ==============================================================================&#10;#&#10;# Security Notes:&#10;# - Keep your Canvas token secure and never share it&#10;# - Canvas tokens can be revoked from your Canvas account settings&#10;# - Consider setting an expiration date on your Canvas token&#10;#&#10;# Troubleshooting:&#10;# - If Canvas API calls fail, verify your token and base URL&#10;# - If TinyMCE doesn't load, check your API key and internet connection&#10;# - Check Canvas API documentation for rate limits and permissions&#10;#&#10;" />
              <option name="updatedContent" value="# config_template.py&#10;# Configuration template for Can Announce&#10;#&#10;# INSTRUCTIONS:&#10;# 1. Copy this file to 'config.py' in the same directory&#10;# 2. Replace all dummy values with your actual credentials and settings&#10;# 3. Never commit the actual config.py file to version control&#10;&#10;# ==============================================================================&#10;# CANVAS API CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Your Canvas API access token&#10;# To get this token:&#10;# 1. Log into your Canvas instance&#10;# 2. Go to Account → Settings&#10;# 3. Scroll down to &quot;Approved Integrations&quot;&#10;# 4. Click &quot;+ New Access Token&quot;&#10;# 5. Enter a purpose (e.g., &quot;Can Announce App&quot;)&#10;# 6. Set expiration date (optional)&#10;# 7. Click &quot;Generate Token&quot; and copy the token&#10;CANVAS_TOKEN = 'your_canvas_api_token_here_1234567890abcdefghijklmnopqrstuvwxyz'&#10;&#10;# Your institution's Canvas base URL&#10;# Examples:&#10;#   - https://canvas.instructure.com (for Canvas Cloud)&#10;#   - https://youruniversity.instructure.com&#10;#   - https://canvas.yourschool.edu&#10;# DO NOT include trailing slash&#10;CANVAS_BASE_URL = 'https://your-institution.instructure.com'&#10;&#10;# ==============================================================================&#10;# COURSE CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Default course ID to use if none is provided&#10;# You can find this in the URL when viewing a course:&#10;# https://your-canvas.com/courses/123456 (the number is the course ID)&#10;# This is optional - leave as empty string if not needed&#10;DEFAULT_COURSE_ID = '123456'&#10;&#10;# Number of days to look ahead for upcoming assignments&#10;# These assignments will be automatically included in announcement templates&#10;UPCOMING_ASSIGNMENT_DAYS = 5&#10;&#10;# ==============================================================================&#10;# TINYMCE EDITOR CONFIGURATION&#10;# ==============================================================================&#10;&#10;# TinyMCE API key for the rich text editor&#10;# To get this key:&#10;# 1. Go to https://www.tiny.cloud/&#10;# 2. Sign up for a free account&#10;# 3. Go to the Dashboard&#10;# 4. Copy your API key from the &quot;API Key&quot; section&#10;# The free tier allows up to 1,000 loads per month&#10;TINYMCE_API_KEY = 'your_tinymce_api_key_here_abcdefghijklmnopqrstuvwxyz123456'&#10;&#10;# ==============================================================================&#10;# ANNOUNCEMENT PUBLISHING CONFIGURATION&#10;# ==============================================================================&#10;&#10;# Controls what happens when no publish date is selected in the datepicker&#10;# Set to True: Publish announcements immediately when no date is selected&#10;# Set to False: Schedule announcements 30 days in the future when no date is selected&#10;#&#10;# NOTE: This setting does NOT disable the datepicker. Users can always override&#10;# this behavior by selecting a specific date/time in the datepicker interface.&#10;# This only affects the fallback behavior when the datepicker is left empty.&#10;ANNOUNCEMENT_NOW = False&#10;&#10;# ==============================================================================&#10;# ADDITIONAL NOTES&#10;# ==============================================================================&#10;#&#10;# Security Notes:&#10;# - Keep your Canvas token secure and never share it&#10;# - Canvas tokens can be revoked from your Canvas account settings&#10;# - Consider setting an expiration date on your Canvas token&#10;#&#10;# Troubleshooting:&#10;# - If Canvas API calls fail, verify your token and base URL&#10;# - If TinyMCE doesn't load, check your API key and internet connection&#10;# - Check Canvas API documentation for rate limits and permissions&#10;#" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/install_dependencies.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/install_dependencies.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;&quot;&quot;&quot;&#10;Installation script for Canvas Announcer with PyQt5 fallback options&#10;This script tries multiple methods to install PyQt5 on macOS&#10;&quot;&quot;&quot;&#10;&#10;echo &quot;Canvas Announcer Installation Script&quot;&#10;echo &quot;====================================&quot;&#10;&#10;# Function to check if a command exists&#10;command_exists() {&#10;    command -v &quot;$1&quot; &gt;/dev/null 2&gt;&amp;1&#10;}&#10;&#10;# Function to test PyQt5 installation&#10;test_pyqt5() {&#10;    python3 -c &quot;import PyQt5.QtWidgets; print('PyQt5 installation successful!')&quot; 2&gt;/dev/null&#10;}&#10;&#10;echo &quot;Step 1: Upgrading pip, setuptools, and wheel...&quot;&#10;pip install --upgrade pip setuptools wheel&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 2: Attempting PyQt5 installation methods...&quot;&#10;&#10;# Method 1: Try with pre-compiled wheels only&#10;echo &quot;Method 1: Installing with pre-compiled wheels...&quot;&#10;pip install --only-binary=all PyQt5==5.15.9 PyQtWebEngine==5.15.6&#10;if test_pyqt5; then&#10;    echo &quot;✅ PyQt5 installed successfully with pre-compiled wheels!&quot;&#10;    pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;    echo &quot;✅ All dependencies installed!&quot;&#10;    exit 0&#10;fi&#10;&#10;# Method 2: Try with Homebrew Qt&#10;if command_exists brew; then&#10;    echo &quot;Method 2: Installing Qt via Homebrew and then PyQt5...&quot;&#10;    brew install qt@5&#10;    export PATH=&quot;/opt/homebrew/opt/qt@5/bin:$PATH&quot;&#10;    export LDFLAGS=&quot;-L/opt/homebrew/opt/qt@5/lib&quot;&#10;    export CPPFLAGS=&quot;-I/opt/homebrew/opt/qt@5/include&quot;&#10;&#10;    pip install PyQt5==5.15.9 PyQtWebEngine==5.15.6&#10;    if test_pyqt5; then&#10;        echo &quot;✅ PyQt5 installed successfully with Homebrew Qt!&quot;&#10;        pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;        echo &quot;✅ All dependencies installed!&quot;&#10;        exit 0&#10;    fi&#10;else&#10;    echo &quot;Homebrew not found, skipping Method 2...&quot;&#10;fi&#10;&#10;# Method 3: Try with conda if available&#10;if command_exists conda; then&#10;    echo &quot;Method 3: Installing PyQt5 via conda...&quot;&#10;    conda install -y pyqt=5.15.9&#10;    if test_pyqt5; then&#10;        echo &quot;✅ PyQt5 installed successfully with conda!&quot;&#10;        pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;        echo &quot;✅ All dependencies installed!&quot;&#10;        exit 0&#10;    fi&#10;else&#10;    echo &quot;Conda not found, skipping Method 3...&quot;&#10;fi&#10;&#10;# Method 4: Try newer version&#10;echo &quot;Method 4: Trying with newer PyQt5 version...&quot;&#10;pip install PyQt5==5.15.10 PyQtWebEngine==5.15.6&#10;if test_pyqt5; then&#10;    echo &quot;✅ PyQt5 installed successfully with newer version!&quot;&#10;    pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;    echo &quot;✅ All dependencies installed!&quot;&#10;    exit 0&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;❌ All PyQt5 installation methods failed.&quot;&#10;echo &quot;&quot;&#10;echo &quot;Alternative options:&quot;&#10;echo &quot;1. Use the web-only version: python main_web.py&quot;&#10;echo &quot;2. Install PyQt5 manually through your system package manager&quot;&#10;echo &quot;3. Use a Python virtual environment with a different Python version&quot;&#10;echo &quot;&quot;&#10;echo &quot;For manual installation, try:&quot;&#10;echo &quot;  brew install pyqt@5&quot;&#10;echo &quot;  pip install PyQt5&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;&quot;&quot;&quot;&#10;Installation script for Can Announce with PyQt5 fallback options&#10;This script tries multiple methods to install PyQt5 on macOS&#10;&quot;&quot;&quot;&#10;&#10;echo &quot;Can Announce Installation Script&quot;&#10;echo &quot;====================================&quot;&#10;&#10;# Function to check if a command exists&#10;command_exists() {&#10;    command -v &quot;$1&quot; &gt;/dev/null 2&gt;&amp;1&#10;}&#10;&#10;# Function to test PyQt5 installation&#10;test_pyqt5() {&#10;    python3 -c &quot;import PyQt5.QtWidgets; print('PyQt5 installation successful!')&quot; 2&gt;/dev/null&#10;}&#10;&#10;echo &quot;Step 1: Upgrading pip, setuptools, and wheel...&quot;&#10;pip install --upgrade pip setuptools wheel&#10;&#10;echo &quot;&quot;&#10;echo &quot;Step 2: Attempting PyQt5 installation methods...&quot;&#10;&#10;# Method 1: Try with pre-compiled wheels only&#10;echo &quot;Method 1: Installing with pre-compiled wheels...&quot;&#10;pip install --only-binary=all PyQt5==5.15.9 PyQtWebEngine==5.15.6&#10;if test_pyqt5; then&#10;    echo &quot;✅ PyQt5 installed successfully with pre-compiled wheels!&quot;&#10;    pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;    echo &quot;✅ All dependencies installed!&quot;&#10;    exit 0&#10;fi&#10;&#10;# Method 2: Try with Homebrew Qt&#10;if command_exists brew; then&#10;    echo &quot;Method 2: Installing Qt via Homebrew and then PyQt5...&quot;&#10;    brew install qt@5&#10;    export PATH=&quot;/opt/homebrew/opt/qt@5/bin:$PATH&quot;&#10;    export LDFLAGS=&quot;-L/opt/homebrew/opt/qt@5/lib&quot;&#10;    export CPPFLAGS=&quot;-I/opt/homebrew/opt/qt@5/include&quot;&#10;&#10;    pip install PyQt5==5.15.9 PyQtWebEngine==5.15.6&#10;    if test_pyqt5; then&#10;        echo &quot;✅ PyQt5 installed successfully with Homebrew Qt!&quot;&#10;        pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;        echo &quot;✅ All dependencies installed!&quot;&#10;        exit 0&#10;    fi&#10;else&#10;    echo &quot;Homebrew not found, skipping Method 2...&quot;&#10;fi&#10;&#10;# Method 3: Try with conda if available&#10;if command_exists conda; then&#10;    echo &quot;Method 3: Installing PyQt5 via conda...&quot;&#10;    conda install -y pyqt=5.15.9&#10;    if test_pyqt5; then&#10;        echo &quot;✅ PyQt5 installed successfully with conda!&quot;&#10;        pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;        echo &quot;✅ All dependencies installed!&quot;&#10;        exit 0&#10;    fi&#10;else&#10;    echo &quot;Conda not found, skipping Method 3...&quot;&#10;fi&#10;&#10;# Method 4: Try newer version&#10;echo &quot;Method 4: Trying with newer PyQt5 version...&quot;&#10;pip install PyQt5==5.15.10 PyQtWebEngine==5.15.6&#10;if test_pyqt5; then&#10;    echo &quot;✅ PyQt5 installed successfully with newer version!&quot;&#10;    pip install Flask==2.3.3 requests==2.31.0 Werkzeug==2.3.7&#10;    echo &quot;✅ All dependencies installed!&quot;&#10;    exit 0&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot;❌ All PyQt5 installation methods failed.&quot;&#10;echo &quot;&quot;&#10;echo &quot;Alternative options:&quot;&#10;echo &quot;1. Use the web-only version: python main_web.py&quot;&#10;echo &quot;2. Install PyQt5 manually through your system package manager&quot;&#10;echo &quot;3. Use a Python virtual environment with a different Python version&quot;&#10;echo &quot;&quot;&#10;echo &quot;For manual installation, try:&quot;&#10;echo &quot;  brew install pyqt@5&quot;&#10;echo &quot;  pip install PyQt5&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/main.py" />
              <option name="originalContent" value="import requests&#10;import subprocess&#10;import os&#10;import sys&#10;import socket&#10;from PyQt5.QtWidgets import QApplication, QMainWindow&#10;from PyQt5.QtWebEngineWidgets import QWebEngineView&#10;from PyQt5.QtCore import QUrl&#10;&#10;def test_canvas_api(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Test Canvas API authentication by fetching the current user's profile.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance (e.g., https://canvas.instructure.com)&#10;    Returns:&#10;        dict: User profile if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    url = f'{base_url}/api/v1/users/self/profile'&#10;    response = requests.get(url, headers=headers)&#10;    if response.status_code == 200:&#10;        print('Authentication successful!')&#10;        print('User profile:')&#10;        print(response.json())&#10;        return response.json()&#10;    else:&#10;        print(f'Authentication failed. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;def get_canvas_courses(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Fetch a list of courses the user has access to.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance.&#10;    Returns:&#10;        list: List of courses if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    params = {&#10;        'enrollment_state': 'active',&#10;        'state': 'available'&#10;    }&#10;    url = f'{base_url}/api/v1/courses'&#10;    response = requests.get(url, headers=headers, params=params)&#10;    if response.status_code == 200:&#10;        courses = response.json()&#10;        print('Courses:')&#10;        for course in courses:&#10;            print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;        return courses&#10;    else:&#10;        print(f'Failed to fetch courses. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;class FlaskWindow(QMainWindow):&#10;    def __init__(self, url):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Canvas Announcement Entry&quot;)&#10;        # Increase window size and center it better on screen&#10;        self.setGeometry(50, 50, 1200, 900)  # x, y, width, height&#10;&#10;        self.browser = QWebEngineView()&#10;        self.browser.setUrl(QUrl(url))&#10;&#10;        # Remove scroll bars from the web view&#10;        self.browser.page().settings().setAttribute(&#10;            self.browser.page().settings().WebAttribute.ShowScrollBars, False&#10;        )&#10;&#10;        # Monitor for shutdown signal from the web page&#10;        self.browser.page().titleChanged.connect(self.check_for_shutdown)&#10;&#10;        self.setCentralWidget(self.browser)&#10;&#10;    def check_for_shutdown(self, title):&#10;        &quot;&quot;&quot;Check if the web page is requesting shutdown&quot;&quot;&quot;&#10;        if title == &quot;SHUTDOWN_REQUESTED&quot;:&#10;            print(&quot;Shutdown requested by web page&quot;)&#10;            self.close()&#10;&#10;    def closeEvent(self, event):&#10;        &quot;&quot;&quot;Handle window close event to ensure proper cleanup&quot;&quot;&quot;&#10;        print(&quot;Closing application...&quot;)&#10;        event.accept()&#10;&#10;&#10;# Press the green button in the gutter to run the script.&#10;if __name__ == '__main__':&#10;    print_hi('PyCharm')&#10;    # Import Canvas token and base URL from config.py&#10;    from config import canvas_token, canvas_base_url&#10;    CANVAS_TOKEN = canvas_token&#10;    CANVAS_BASE_URL = canvas_base_url&#10;    test_canvas_api(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;    courses = get_canvas_courses(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;&#10;    # Dynamically find an available port for Flask&#10;    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;        s.bind((&quot;127.0.0.1&quot;, 0))&#10;        port = s.getsockname()[1]&#10;&#10;    # Launch the Flask app for the modal UI&#10;    # Ensure we use the same Python interpreter that's currently running&#10;    python_executable = sys.executable&#10;    flask_process = subprocess.Popen(&#10;        [python_executable, &quot;app.py&quot;, str(port)],  # Pass the port as an argument&#10;        cwd=os.path.dirname(os.path.abspath(__file__)),&#10;        env={**os.environ, &quot;FLASK_ENV&quot;: &quot;development&quot;}&#10;    )&#10;&#10;    # Ensure Flask app is fully initialized before accessing the route&#10;    import time&#10;    for _ in range(10):  # Retry for up to 10 seconds&#10;        try:&#10;            response = requests.get(f&quot;http://127.0.0.1:{port}/select_course&quot;)&#10;            if response.status_code == 200:&#10;                print(&quot;Flask app is ready.&quot;)&#10;                break&#10;        except requests.ConnectionError:&#10;            time.sleep(1)&#10;    else:&#10;        print(&quot;Flask app failed to start.&quot;)&#10;        flask_process.terminate()&#10;        sys.exit(1)&#10;&#10;    # Open the Flask app in a PyQt5 modal window&#10;    app = QApplication(sys.argv)&#10;    url = f&quot;http://127.0.0.1:{port}/select_course&quot;  # Start with the course selection screen&#10;    window = FlaskWindow(url)&#10;    window.show()&#10;&#10;    try:&#10;        sys.exit(app.exec_())&#10;    finally:&#10;        flask_process.terminate()&#10;" />
              <option name="updatedContent" value="import requests&#10;import subprocess&#10;import os&#10;import sys&#10;import socket&#10;from PyQt5.QtWidgets import QApplication, QMainWindow&#10;from PyQt5.QtWebEngineWidgets import QWebEngineView&#10;from PyQt5.QtCore import QUrl&#10;&#10;def test_canvas_api(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Test Canvas API authentication by fetching the current user's profile.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance (e.g., https://canvas.instructure.com)&#10;    Returns:&#10;        dict: User profile if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    url = f'{base_url}/api/v1/users/self/profile'&#10;    response = requests.get(url, headers=headers)&#10;    if response.status_code == 200:&#10;        print('Authentication successful!')&#10;        print('User profile:')&#10;        print(response.json())&#10;        return response.json()&#10;    else:&#10;        print(f'Authentication failed. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;def get_canvas_courses(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Fetch a list of courses the user has access to.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance.&#10;    Returns:&#10;        list: List of courses if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    params = {&#10;        'enrollment_state': 'active',&#10;        'state': 'available'&#10;    }&#10;    url = f'{base_url}/api/v1/courses'&#10;    response = requests.get(url, headers=headers, params=params)&#10;    if response.status_code == 200:&#10;        courses = response.json()&#10;        print('Courses:')&#10;        for course in courses:&#10;            print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;        return courses&#10;    else:&#10;        print(f'Failed to fetch courses. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;class FlaskWindow(QMainWindow):&#10;    def __init__(self, url):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Canvas Announcement Entry&quot;)&#10;        # Increase window size and center it better on screen&#10;        self.setGeometry(50, 50, 1200, 900)  # x, y, width, height&#10;&#10;        self.browser = QWebEngineView()&#10;        self.browser.setUrl(QUrl(url))&#10;&#10;        # Remove scroll bars from the web view&#10;        self.browser.page().settings().setAttribute(&#10;            self.browser.page().settings().WebAttribute.ShowScrollBars, False&#10;        )&#10;&#10;        # Monitor for shutdown signal from the web page&#10;        self.browser.page().titleChanged.connect(self.check_for_shutdown)&#10;&#10;        self.setCentralWidget(self.browser)&#10;&#10;    def check_for_shutdown(self, title):&#10;        &quot;&quot;&quot;Check if the web page is requesting shutdown&quot;&quot;&quot;&#10;        if title == &quot;SHUTDOWN_REQUESTED&quot;:&#10;            print(&quot;Shutdown requested by web page&quot;)&#10;            self.close()&#10;&#10;    def closeEvent(self, event):&#10;        &quot;&quot;&quot;Handle window close event to ensure proper cleanup&quot;&quot;&quot;&#10;        print(&quot;Closing application...&quot;)&#10;        event.accept()&#10;&#10;&#10;# Press the green button in the gutter to run the script.&#10;if __name__ == '__main__':&#10;    # Import Canvas token and base URL from config.py&#10;    from config import canvas_token, canvas_base_url&#10;    CANVAS_TOKEN = canvas_token&#10;    CANVAS_BASE_URL = canvas_base_url&#10;    test_canvas_api(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;    courses = get_canvas_courses(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;&#10;    # Dynamically find an available port for Flask&#10;    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;        s.bind((&quot;127.0.0.1&quot;, 0))&#10;        port = s.getsockname()[1]&#10;&#10;    # Launch the Flask app for the modal UI&#10;    # Ensure we use the same Python interpreter that's currently running&#10;    python_executable = sys.executable&#10;    flask_process = subprocess.Popen(&#10;        [python_executable, &quot;app.py&quot;, str(port)],  # Pass the port as an argument&#10;        cwd=os.path.dirname(os.path.abspath(__file__)),&#10;        env={**os.environ, &quot;FLASK_ENV&quot;: &quot;development&quot;}&#10;    )&#10;&#10;    # Ensure Flask app is fully initialized before accessing the route&#10;    import time&#10;    for _ in range(10):  # Retry for up to 10 seconds&#10;        try:&#10;            response = requests.get(f&quot;http://127.0.0.1:{port}/select_course&quot;)&#10;            if response.status_code == 200:&#10;                print(&quot;Flask app is ready.&quot;)&#10;                break&#10;        except requests.ConnectionError:&#10;            time.sleep(1)&#10;    else:&#10;        print(&quot;Flask app failed to start.&quot;)&#10;        flask_process.terminate()&#10;        sys.exit(1)&#10;&#10;    # Open the Flask app in a PyQt5 modal window&#10;    app = QApplication(sys.argv)&#10;    url = f&quot;http://127.0.0.1:{port}/select_course&quot;  # Start with the course selection screen&#10;    window = FlaskWindow(url)&#10;    window.show()&#10;&#10;    try:&#10;        sys.exit(app.exec_())&#10;    finally:&#10;        flask_process.terminate()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/main_web.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/main_web.py" />
              <option name="originalContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Web-only version of Canvas Announcer that opens in your default browser&#10;This version doesn't require PyQt5 and should work without dependency issues&#10;&quot;&quot;&quot;&#10;&#10;import requests&#10;import subprocess&#10;import os&#10;import sys&#10;import socket&#10;import webbrowser&#10;import time&#10;&#10;def test_canvas_api(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Test Canvas API authentication by fetching the current user's profile.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance (e.g., https://canvas.instructure.com)&#10;    Returns:&#10;        dict: User profile if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    url = f'{base_url}/api/v1/users/self/profile'&#10;    response = requests.get(url, headers=headers)&#10;    if response.status_code == 200:&#10;        print('Authentication successful!')&#10;        print('User profile:')&#10;        print(response.json())&#10;        return response.json()&#10;    else:&#10;        print(f'Authentication failed. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;def get_canvas_courses(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Fetch a list of courses the user has access to.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance.&#10;    Returns:&#10;        list: List of courses if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    params = {&#10;        'enrollment_state': 'active',&#10;        'state': 'available'&#10;    }&#10;    url = f'{base_url}/api/v1/courses'&#10;    response = requests.get(url, headers=headers, params=params)&#10;    if response.status_code == 200:&#10;        courses = response.json()&#10;        print('Courses:')&#10;        for course in courses:&#10;            print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;        return courses&#10;    else:&#10;        print(f'Failed to fetch courses. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Starting Canvas Announcer (Web Version)...&quot;)&#10;&#10;    # Import Canvas token and base URL from config.py&#10;    try:&#10;        from config import canvas_token, canvas_base_url&#10;    except ImportError:&#10;        print(&quot;Error: config.py not found. Please create it from config_template.py&quot;)&#10;        sys.exit(1)&#10;&#10;    CANVAS_TOKEN = canvas_token&#10;    CANVAS_BASE_URL = canvas_base_url&#10;&#10;    # Test Canvas API connection&#10;    print(&quot;Testing Canvas API connection...&quot;)&#10;    test_canvas_api(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;    courses = get_canvas_courses(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;&#10;    # Dynamically find an available port for Flask&#10;    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;        s.bind((&quot;127.0.0.1&quot;, 0))&#10;        port = s.getsockname()[1]&#10;&#10;    print(f&quot;Starting Flask app on port {port}...&quot;)&#10;&#10;    # Launch the Flask app&#10;    python_executable = sys.executable&#10;    flask_process = subprocess.Popen(&#10;        [python_executable, &quot;app.py&quot;, str(port)],&#10;        cwd=os.path.dirname(os.path.abspath(__file__)),&#10;        env={**os.environ, &quot;FLASK_ENV&quot;: &quot;development&quot;}&#10;    )&#10;&#10;    # Wait for Flask app to start&#10;    print(&quot;Waiting for Flask app to initialize...&quot;)&#10;    for attempt in range(10):&#10;        try:&#10;            response = requests.get(f&quot;http://127.0.0.1:{port}/select_course&quot;)&#10;            if response.status_code == 200:&#10;                print(&quot;Flask app is ready!&quot;)&#10;                break&#10;        except requests.ConnectionError:&#10;            time.sleep(1)&#10;            print(f&quot;  Attempt {attempt + 1}/10...&quot;)&#10;    else:&#10;        print(&quot;Flask app failed to start within 10 seconds.&quot;)&#10;        flask_process.terminate()&#10;        sys.exit(1)&#10;&#10;    # Open in default web browser&#10;    url = f&quot;http://127.0.0.1:{port}/select_course&quot;&#10;    print(f&quot;Opening Canvas Announcer in your browser: {url}&quot;)&#10;    webbrowser.open(url)&#10;&#10;    print(&quot;\nCanvas Announcer is now running!&quot;)&#10;    print(&quot;- The app will open in your default web browser&quot;)&#10;    print(&quot;- Close this terminal or press Ctrl+C to stop the app&quot;)&#10;    print(&quot;- The app will automatically close after submitting an announcement&quot;)&#10;&#10;    try:&#10;        # Keep the script running&#10;        flask_process.wait()&#10;    except KeyboardInterrupt:&#10;        print(&quot;\nShutting down...&quot;)&#10;        flask_process.terminate()&#10;        flask_process.wait()&#10;        print(&quot;Canvas Announcer stopped.&quot;)&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Web-only version of Can Announce that opens in your default browser&#10;This version doesn't require PyQt5 and should work without dependency issues&#10;&quot;&quot;&quot;&#10;&#10;import requests&#10;import subprocess&#10;import os&#10;import sys&#10;import socket&#10;import webbrowser&#10;import time&#10;&#10;def test_canvas_api(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Test Canvas API authentication by fetching the current user's profile.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance (e.g., https://canvas.instructure.com)&#10;    Returns:&#10;        dict: User profile if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    url = f'{base_url}/api/v1/users/self/profile'&#10;    response = requests.get(url, headers=headers)&#10;    if response.status_code == 200:&#10;        print('Authentication successful!')&#10;        print('User profile:')&#10;        print(response.json())&#10;        return response.json()&#10;    else:&#10;        print(f'Authentication failed. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;def get_canvas_courses(token, base_url):&#10;    &quot;&quot;&quot;&#10;    Fetch a list of courses the user has access to.&#10;    Args:&#10;        token (str): Canvas API access token.&#10;        base_url (str): Base URL of the Canvas instance.&#10;    Returns:&#10;        list: List of courses if successful, None otherwise.&#10;    &quot;&quot;&quot;&#10;    headers = {&#10;        'Authorization': f'Bearer {token}'&#10;    }&#10;    params = {&#10;        'enrollment_state': 'active',&#10;        'state': 'available'&#10;    }&#10;    url = f'{base_url}/api/v1/courses'&#10;    response = requests.get(url, headers=headers, params=params)&#10;    if response.status_code == 200:&#10;        courses = response.json()&#10;        print('Courses:')&#10;        for course in courses:&#10;            print(f&quot;- {course.get('name', 'Unnamed Course')} (ID: {course.get('id')})&quot;)&#10;        return courses&#10;    else:&#10;        print(f'Failed to fetch courses. Status code: {response.status_code}')&#10;        print(response.text)&#10;        return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Starting Can Announce (Web Version)...&quot;)&#10;&#10;    # Import Canvas token and base URL from config.py&#10;    try:&#10;        from config import canvas_token, canvas_base_url&#10;    except ImportError:&#10;        print(&quot;Error: config.py not found. Please create it from config_template.py&quot;)&#10;        sys.exit(1)&#10;&#10;    CANVAS_TOKEN = canvas_token&#10;    CANVAS_BASE_URL = canvas_base_url&#10;&#10;    # Test Canvas API connection&#10;    print(&quot;Testing Canvas API connection...&quot;)&#10;    test_canvas_api(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;    courses = get_canvas_courses(CANVAS_TOKEN, CANVAS_BASE_URL)&#10;&#10;    # Dynamically find an available port for Flask&#10;    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:&#10;        s.bind((&quot;127.0.0.1&quot;, 0))&#10;        port = s.getsockname()[1]&#10;&#10;    print(f&quot;Starting Flask app on port {port}...&quot;)&#10;&#10;    # Launch the Flask app&#10;    python_executable = sys.executable&#10;    flask_process = subprocess.Popen(&#10;        [python_executable, &quot;app.py&quot;, str(port)],&#10;        cwd=os.path.dirname(os.path.abspath(__file__)),&#10;        env={**os.environ, &quot;FLASK_ENV&quot;: &quot;development&quot;}&#10;    )&#10;&#10;    # Wait for Flask app to start&#10;    print(&quot;Waiting for Flask app to initialize...&quot;)&#10;    for attempt in range(10):&#10;        try:&#10;            response = requests.get(f&quot;http://127.0.0.1:{port}/select_course&quot;)&#10;            if response.status_code == 200:&#10;                print(&quot;Flask app is ready!&quot;)&#10;                break&#10;        except requests.ConnectionError:&#10;            time.sleep(1)&#10;            print(f&quot;  Attempt {attempt + 1}/10...&quot;)&#10;    else:&#10;        print(&quot;Flask app failed to start within 10 seconds.&quot;)&#10;        flask_process.terminate()&#10;        sys.exit(1)&#10;&#10;    # Open in default web browser&#10;    url = f&quot;http://127.0.0.1:{port}/select_course&quot;&#10;    print(f&quot;Opening Can Announce in your browser: {url}&quot;)&#10;    webbrowser.open(url)&#10;&#10;    print(&quot;\nCan Announce is now running!&quot;)&#10;    print(&quot;- The app will open in your default web browser&quot;)&#10;    print(&quot;- Close this terminal or press Ctrl+C to stop the app&quot;)&#10;    print(&quot;- The app will automatically close after submitting an announcement&quot;)&#10;&#10;    try:&#10;        # Keep the script running&#10;        flask_process.wait()&#10;    except KeyboardInterrupt:&#10;        print(&quot;\nShutting down...&quot;)&#10;        flask_process.terminate()&#10;        flask_process.wait()&#10;        print(&quot;Can Announce stopped.&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/requirements.txt" />
              <option name="originalContent" value="Flask==2.3.3&#10;PyQt5==5.15.9&#10;PyQtWebEngine==5.15.6&#10;requests==2.31.0&#10;Werkzeug==2.3.7&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="Flask==2.3.3&#10;PyQt5==5.15.9&#10;PyQtWebEngine==5.15.6&#10;requests==2.31.0&#10;Werkzeug==2.3.7" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../canannounce/setup.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../canannounce/setup.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&quot;&quot;&quot;&#10;Canvas Announcer Setup Script&#10;This script handles the complete setup process for new users&#10;&quot;&quot;&quot;&#10;&#10;echo &quot; Canvas Announcer Setup&quot;&#10;echo &quot;=========================&quot;&#10;echo &quot;&quot;&#10;&#10;# Check if Python 3 is installed&#10;if ! command -v python3 &amp;&gt; /dev/null; then&#10;    echo &quot;❌ Python 3 is required but not installed.&quot;&#10;    echo &quot;Please install Python 3.7+ and run this script again.&quot;&#10;    exit 1&#10;fi&#10;&#10;echo &quot;✅ Python 3 found: $(python3 --version)&quot;&#10;&#10;# Check if pip is installed&#10;if ! command -v pip &amp;&gt; /dev/null &amp;&amp; ! command -v pip3 &amp;&gt; /dev/null; then&#10;    echo &quot;❌ pip is required but not installed.&quot;&#10;    echo &quot;Please install pip and run this script again.&quot;&#10;    exit 1&#10;fi&#10;&#10;# Use pip3 if available, otherwise pip&#10;PIP_CMD=&quot;pip3&quot;&#10;if ! command -v pip3 &amp;&gt; /dev/null; then&#10;    PIP_CMD=&quot;pip&quot;&#10;fi&#10;&#10;echo &quot;✅ pip found: $PIP_CMD&quot;&#10;echo &quot;&quot;&#10;&#10;# Create virtual environment&#10;echo &quot; Creating virtual environment...&quot;&#10;python3 -m venv venv&#10;source venv/bin/activate&#10;&#10;# Upgrade pip&#10;echo &quot;⬆️  Upgrading pip...&quot;&#10;$PIP_CMD install --upgrade pip setuptools wheel&#10;&#10;# Install dependencies using the automated installer&#10;echo &quot; Installing dependencies...&quot;&#10;if [ -f &quot;install_dependencies.sh&quot; ]; then&#10;    chmod +x install_dependencies.sh&#10;    ./install_dependencies.sh&#10;else&#10;    echo &quot;⚠️  install_dependencies.sh not found, trying direct installation...&quot;&#10;    $PIP_CMD install -r requirements.txt&#10;fi&#10;&#10;# Setup configuration&#10;echo &quot;&quot;&#10;echo &quot;⚙️  Setting up configuration...&quot;&#10;if [ ! -f &quot;config.py&quot; ]; then&#10;    if [ -f &quot;config_template.py&quot; ]; then&#10;        cp config_template.py config.py&#10;        echo &quot;✅ Created config.py from template&quot;&#10;    else&#10;        echo &quot;❌ config_template.py not found!&quot;&#10;        exit 1&#10;    fi&#10;else&#10;    echo &quot;ℹ️  config.py already exists, skipping copy&quot;&#10;fi&#10;&#10;echo &quot;&quot;&#10;echo &quot; Setup Complete!&quot;&#10;echo &quot;&quot;&#10;echo &quot;Next Steps:&quot;&#10;echo &quot;1. Edit config.py with your Canvas and TinyMCE credentials&quot;&#10;echo &quot;2. Get Canvas API token: Canvas → Account → Settings → New Access Token&quot;&#10;echo &quot;3. Get TinyMCE API key: https://www.tiny.cloud/ (free account)&quot;&#10;echo &quot;4. Run the application:&quot;&#10;echo &quot;   - Desktop version: python main.py&quot;&#10;echo &quot;   - Web version: python main_web.py&quot;&#10;echo &quot;&quot;&#10;echo &quot;For help, see README.md or visit: https://github.com/yourusername/canannounce&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>